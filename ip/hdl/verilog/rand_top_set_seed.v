// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rand_top_set_seed (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fpga_uni_num_mt3_address0,
        fpga_uni_num_mt3_ce0,
        fpga_uni_num_mt3_q0,
        fpga_uni_num_mt3_address1,
        fpga_uni_num_mt3_ce1,
        fpga_uni_num_mt3_we1,
        fpga_uni_num_mt3_d1,
        fpga_uni_num_mt2_address0,
        fpga_uni_num_mt2_ce0,
        fpga_uni_num_mt2_q0,
        fpga_uni_num_mt2_address1,
        fpga_uni_num_mt2_ce1,
        fpga_uni_num_mt2_we1,
        fpga_uni_num_mt2_d1,
        fpga_uni_num_mt1_address0,
        fpga_uni_num_mt1_ce0,
        fpga_uni_num_mt1_q0,
        fpga_uni_num_mt1_address1,
        fpga_uni_num_mt1_ce1,
        fpga_uni_num_mt1_we1,
        fpga_uni_num_mt1_d1,
        s,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv10_270 = 10'b1001110000;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv10_E3 = 10'b11100011;
parameter    ap_const_lv10_18D = 10'b110001101;
parameter    ap_const_lv10_31C = 10'b1100011100;
parameter    ap_const_lv10_272 = 10'b1001110010;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_6C078965 = 32'b1101100000001111000100101100101;
parameter    ap_const_lv8_73 = 8'b1110011;
parameter    ap_const_lv8_1D = 8'b11101;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] fpga_uni_num_mt3_address0;
output   fpga_uni_num_mt3_ce0;
input  [31:0] fpga_uni_num_mt3_q0;
output  [7:0] fpga_uni_num_mt3_address1;
output   fpga_uni_num_mt3_ce1;
output   fpga_uni_num_mt3_we1;
output  [31:0] fpga_uni_num_mt3_d1;
output  [7:0] fpga_uni_num_mt2_address0;
output   fpga_uni_num_mt2_ce0;
input  [31:0] fpga_uni_num_mt2_q0;
output  [7:0] fpga_uni_num_mt2_address1;
output   fpga_uni_num_mt2_ce1;
output   fpga_uni_num_mt2_we1;
output  [31:0] fpga_uni_num_mt2_d1;
output  [7:0] fpga_uni_num_mt1_address0;
output   fpga_uni_num_mt1_ce0;
input  [31:0] fpga_uni_num_mt1_q0;
output  [7:0] fpga_uni_num_mt1_address1;
output   fpga_uni_num_mt1_ce1;
output   fpga_uni_num_mt1_we1;
output  [31:0] fpga_uni_num_mt1_d1;
input  [31:0] s;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fpga_uni_num_mt3_ce0;
reg fpga_uni_num_mt3_ce1;
reg fpga_uni_num_mt3_we1;
reg fpga_uni_num_mt2_ce0;
reg fpga_uni_num_mt2_ce1;
reg fpga_uni_num_mt2_we1;
reg[7:0] fpga_uni_num_mt1_address0;
reg fpga_uni_num_mt1_ce0;
reg[7:0] fpga_uni_num_mt1_address1;
reg fpga_uni_num_mt1_ce1;
reg fpga_uni_num_mt1_we1;
reg[31:0] fpga_uni_num_mt1_d1;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm = 12'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_30;
wire   [7:0] fpga_uni_num_mt1_addr_gep_fu_58_p3;
reg   [7:0] fpga_uni_num_mt1_addr_reg_306;
wire   [31:0] mtii_cast5_fu_150_p1;
reg   [31:0] mtii_cast5_reg_311;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_79;
wire   [0:0] tmp_1_fu_166_p2;
reg   [0:0] tmp_1_reg_319;
wire   [0:0] exitcond_fu_154_p2;
wire   [0:0] tmp_3_fu_177_p2;
reg   [0:0] tmp_3_reg_330;
wire   [31:0] read_reg_1_fu_222_p3;
reg   [31:0] read_reg_1_reg_345;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_102;
reg   [1:0] tmp_8_reg_350;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_113;
wire  signed [31:0] write_reg_fu_254_p2;
reg  signed [31:0] write_reg_reg_360;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_122;
wire   [0:0] tmp_10_fu_259_p2;
reg   [0:0] tmp_10_reg_367;
wire   [0:0] tmp_12_fu_265_p2;
reg   [0:0] tmp_12_reg_371;
wire   [7:0] tmp_64_fu_271_p1;
reg   [7:0] tmp_64_reg_375;
wire   [9:0] mtii_1_fu_300_p2;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_139;
reg   [9:0] mtii_reg_137;
wire   [63:0] tmp_2_fu_172_p1;
wire  signed [63:0] tmp_5_fu_189_p1;
wire  signed [63:0] tmp_7_fu_200_p1;
wire   [63:0] tmp_16_fu_280_p1;
wire   [63:0] tmp_14_fu_290_p1;
wire   [63:0] tmp_11_fu_295_p1;
wire   [9:0] tmp_fu_160_p2;
wire   [9:0] tmp_4_fu_183_p2;
wire   [9:0] tmp_6_fu_194_p2;
wire   [0:0] sel_tmp1_fu_212_p2;
wire   [0:0] sel_tmp2_fu_217_p2;
wire   [31:0] read_reg_4_fu_205_p3;
wire   [31:0] tmp_25_fu_240_p1;
wire  signed [31:0] grp_fu_248_p0;
wire   [31:0] grp_fu_248_p1;
wire  signed [31:0] grp_fu_248_p2;
wire   [7:0] tmp_15_fu_275_p2;
wire   [7:0] tmp_13_fu_285_p2;
wire    grp_fu_248_ce;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_278;
reg   [11:0] ap_NS_fsm;


rand_top_mul_32s_32ns_32_7 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rand_top_mul_32s_32ns_32_7_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_248_p0 ),
    .din1( grp_fu_248_p1 ),
    .ce( grp_fu_248_ce ),
    .dout( grp_fu_248_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
            ap_return_preg <= fpga_uni_num_mt1_q0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        mtii_reg_137 <= mtii_1_fu_300_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        mtii_reg_137 <= ap_const_lv10_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        mtii_cast5_reg_311[0] <= mtii_cast5_fu_150_p1[0];
mtii_cast5_reg_311[1] <= mtii_cast5_fu_150_p1[1];
mtii_cast5_reg_311[2] <= mtii_cast5_fu_150_p1[2];
mtii_cast5_reg_311[3] <= mtii_cast5_fu_150_p1[3];
mtii_cast5_reg_311[4] <= mtii_cast5_fu_150_p1[4];
mtii_cast5_reg_311[5] <= mtii_cast5_fu_150_p1[5];
mtii_cast5_reg_311[6] <= mtii_cast5_fu_150_p1[6];
mtii_cast5_reg_311[7] <= mtii_cast5_fu_150_p1[7];
mtii_cast5_reg_311[8] <= mtii_cast5_fu_150_p1[8];
mtii_cast5_reg_311[9] <= mtii_cast5_fu_150_p1[9];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        read_reg_1_reg_345 <= read_reg_1_fu_222_p3;
        tmp_8_reg_350 <= {{read_reg_1_fu_222_p3[ap_const_lv32_1F : ap_const_lv32_1E]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_10_reg_367 <= tmp_10_fu_259_p2;
        write_reg_reg_360 <= write_reg_fu_254_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & (ap_const_lv1_0 == tmp_10_fu_259_p2))) begin
        tmp_12_reg_371 <= tmp_12_fu_265_p2;
        tmp_64_reg_375 <= tmp_64_fu_271_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_154_p2 == ap_const_lv1_0))) begin
        tmp_1_reg_319 <= tmp_1_fu_166_p2;
        tmp_3_reg_330 <= tmp_3_fu_177_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st12_fsm_11)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st12_fsm_11)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (fpga_uni_num_mt1_q0 or ap_return_preg or ap_sig_cseq_ST_st12_fsm_11)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        ap_return = fpga_uni_num_mt1_q0;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_122)
begin
    if (ap_sig_bdd_122) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_139)
begin
    if (ap_sig_bdd_139) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_278)
begin
    if (ap_sig_bdd_278) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_30)
begin
    if (ap_sig_bdd_30) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt1_address0 assign process. ///
always @ (fpga_uni_num_mt1_addr_reg_306 or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_154_p2 or tmp_2_fu_172_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        if (~(exitcond_fu_154_p2 == ap_const_lv1_0)) begin
            fpga_uni_num_mt1_address0 = fpga_uni_num_mt1_addr_reg_306;
        end else if ((exitcond_fu_154_p2 == ap_const_lv1_0)) begin
            fpga_uni_num_mt1_address0 = tmp_2_fu_172_p1;
        end else begin
            fpga_uni_num_mt1_address0 = 'bx;
        end
    end else begin
        fpga_uni_num_mt1_address0 = 'bx;
    end
end

/// fpga_uni_num_mt1_address1 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st11_fsm_10 or tmp_11_fu_295_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        fpga_uni_num_mt1_address1 = tmp_11_fu_295_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        fpga_uni_num_mt1_address1 = ap_const_lv64_0;
    end else begin
        fpga_uni_num_mt1_address1 = 'bx;
    end
end

/// fpga_uni_num_mt1_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_154_p2)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_154_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_154_p2 == ap_const_lv1_0)))) begin
        fpga_uni_num_mt1_ce0 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt1_ce0 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt1_ce1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        fpga_uni_num_mt1_ce1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt1_ce1 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt1_d1 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or s or write_reg_reg_360 or ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        fpga_uni_num_mt1_d1 = write_reg_reg_360;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        fpga_uni_num_mt1_d1 = s;
    end else begin
        fpga_uni_num_mt1_d1 = 'bx;
    end
end

/// fpga_uni_num_mt1_we1 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_10_reg_367 or ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & ~(ap_const_lv1_0 == tmp_10_reg_367)))) begin
        fpga_uni_num_mt1_we1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt1_we1 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt2_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        fpga_uni_num_mt2_ce0 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt2_ce0 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt2_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        fpga_uni_num_mt2_ce1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt2_ce1 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt2_we1 assign process. ///
always @ (tmp_10_reg_367 or tmp_12_reg_371 or ap_sig_cseq_ST_st11_fsm_10)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & (ap_const_lv1_0 == tmp_10_reg_367) & ~(ap_const_lv1_0 == tmp_12_reg_371))) begin
        fpga_uni_num_mt2_we1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt2_we1 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt3_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        fpga_uni_num_mt3_ce0 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt3_ce0 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt3_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        fpga_uni_num_mt3_ce1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt3_ce1 = ap_const_logic_0;
    end
end

/// fpga_uni_num_mt3_we1 assign process. ///
always @ (tmp_10_reg_367 or tmp_12_reg_371 or ap_sig_cseq_ST_st11_fsm_10)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & (ap_const_lv1_0 == tmp_10_reg_367) & (ap_const_lv1_0 == tmp_12_reg_371))) begin
        fpga_uni_num_mt3_we1 = ap_const_logic_1;
    end else begin
        fpga_uni_num_mt3_we1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_154_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_154_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_122 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_122 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_139 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_278 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_278 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_30 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_30 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign exitcond_fu_154_p2 = (mtii_reg_137 == ap_const_lv10_270? 1'b1: 1'b0);
assign fpga_uni_num_mt1_addr_gep_fu_58_p3 = ap_const_lv64_0;
assign fpga_uni_num_mt2_address0 = tmp_5_fu_189_p1;
assign fpga_uni_num_mt2_address1 = tmp_14_fu_290_p1;
assign fpga_uni_num_mt2_d1 = write_reg_reg_360;
assign fpga_uni_num_mt3_address0 = tmp_7_fu_200_p1;
assign fpga_uni_num_mt3_address1 = tmp_16_fu_280_p1;
assign fpga_uni_num_mt3_d1 = write_reg_reg_360;
assign grp_fu_248_ce = ap_const_logic_1;
assign grp_fu_248_p0 = (tmp_25_fu_240_p1 ^ read_reg_1_reg_345);
assign grp_fu_248_p1 = ap_const_lv32_6C078965;
assign mtii_1_fu_300_p2 = (mtii_reg_137 + ap_const_lv10_1);
assign mtii_cast5_fu_150_p1 = mtii_reg_137;
assign read_reg_1_fu_222_p3 = ((sel_tmp2_fu_217_p2)? fpga_uni_num_mt2_q0: read_reg_4_fu_205_p3);
assign read_reg_4_fu_205_p3 = ((tmp_1_reg_319)? fpga_uni_num_mt1_q0: fpga_uni_num_mt3_q0);
assign sel_tmp1_fu_212_p2 = (tmp_1_reg_319 ^ ap_const_lv1_1);
assign sel_tmp2_fu_217_p2 = (tmp_3_reg_330 & sel_tmp1_fu_212_p2);
assign tmp_10_fu_259_p2 = (mtii_reg_137 < ap_const_lv10_E3? 1'b1: 1'b0);
assign tmp_11_fu_295_p1 = mtii_reg_137;
assign tmp_12_fu_265_p2 = (mtii_reg_137 < ap_const_lv10_18D? 1'b1: 1'b0);
assign tmp_13_fu_285_p2 = (tmp_64_reg_375 + ap_const_lv8_1D);
assign tmp_14_fu_290_p1 = tmp_13_fu_285_p2;
assign tmp_15_fu_275_p2 = (tmp_64_reg_375 + ap_const_lv8_73);
assign tmp_16_fu_280_p1 = tmp_15_fu_275_p2;
assign tmp_1_fu_166_p2 = (tmp_fu_160_p2 < ap_const_lv10_E3? 1'b1: 1'b0);
assign tmp_25_fu_240_p1 = tmp_8_reg_350;
assign tmp_2_fu_172_p1 = tmp_fu_160_p2;
assign tmp_3_fu_177_p2 = (tmp_fu_160_p2 < ap_const_lv10_18D? 1'b1: 1'b0);
assign tmp_4_fu_183_p2 = ($signed(mtii_reg_137) + $signed(ap_const_lv10_31C));
assign tmp_5_fu_189_p1 = $signed(tmp_4_fu_183_p2);
assign tmp_64_fu_271_p1 = mtii_reg_137[7:0];
assign tmp_6_fu_194_p2 = ($signed(mtii_reg_137) + $signed(ap_const_lv10_272));
assign tmp_7_fu_200_p1 = $signed(tmp_6_fu_194_p2);
assign tmp_fu_160_p2 = ($signed(mtii_reg_137) + $signed(ap_const_lv10_3FF));
assign write_reg_fu_254_p2 = ($signed(grp_fu_248_p2) + $signed(mtii_cast5_reg_311));
always @ (posedge ap_clk)
begin
    fpga_uni_num_mt1_addr_reg_306[7:0] <= 8'b00000000;
    mtii_cast5_reg_311[31:10] <= 22'b0000000000000000000000;
end



endmodule //rand_top_set_seed

