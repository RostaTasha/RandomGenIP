-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rand_top_set_seed is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fpga_uni_num_mt3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt3_ce0 : OUT STD_LOGIC;
    fpga_uni_num_mt3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fpga_uni_num_mt3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt3_ce1 : OUT STD_LOGIC;
    fpga_uni_num_mt3_we1 : OUT STD_LOGIC;
    fpga_uni_num_mt3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fpga_uni_num_mt2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt2_ce0 : OUT STD_LOGIC;
    fpga_uni_num_mt2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fpga_uni_num_mt2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt2_ce1 : OUT STD_LOGIC;
    fpga_uni_num_mt2_we1 : OUT STD_LOGIC;
    fpga_uni_num_mt2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fpga_uni_num_mt1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt1_ce0 : OUT STD_LOGIC;
    fpga_uni_num_mt1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fpga_uni_num_mt1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fpga_uni_num_mt1_ce1 : OUT STD_LOGIC;
    fpga_uni_num_mt1_we1 : OUT STD_LOGIC;
    fpga_uni_num_mt1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    s : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of rand_top_set_seed is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_270 : STD_LOGIC_VECTOR (9 downto 0) := "1001110000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_E3 : STD_LOGIC_VECTOR (9 downto 0) := "0011100011";
    constant ap_const_lv10_18D : STD_LOGIC_VECTOR (9 downto 0) := "0110001101";
    constant ap_const_lv10_31C : STD_LOGIC_VECTOR (9 downto 0) := "1100011100";
    constant ap_const_lv10_272 : STD_LOGIC_VECTOR (9 downto 0) := "1001110010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6C078965 : STD_LOGIC_VECTOR (31 downto 0) := "01101100000001111000100101100101";
    constant ap_const_lv8_73 : STD_LOGIC_VECTOR (7 downto 0) := "01110011";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal fpga_uni_num_mt1_addr_gep_fu_58_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal fpga_uni_num_mt1_addr_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal mtii_cast5_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mtii_cast5_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal tmp_1_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_reg_1_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_reg_1_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal tmp_8_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal write_reg_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_reg_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal tmp_10_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal mtii_1_fu_300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal mtii_reg_137 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_160_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_183_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sel_tmp1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal read_reg_4_fu_205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_285_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_248_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component rand_top_mul_32s_32ns_32_7 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rand_top_mul_32s_32ns_32_7_U0 : component rand_top_mul_32s_32ns_32_7
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                    ap_return_preg <= fpga_uni_num_mt1_q0;
                end if; 
            end if;
        end if;
    end process;


    -- mtii_reg_137 assign process. --
    mtii_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                mtii_reg_137 <= mtii_1_fu_300_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                mtii_reg_137 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                mtii_cast5_reg_311(0) <= mtii_cast5_fu_150_p1(0);
    mtii_cast5_reg_311(1) <= mtii_cast5_fu_150_p1(1);
    mtii_cast5_reg_311(2) <= mtii_cast5_fu_150_p1(2);
    mtii_cast5_reg_311(3) <= mtii_cast5_fu_150_p1(3);
    mtii_cast5_reg_311(4) <= mtii_cast5_fu_150_p1(4);
    mtii_cast5_reg_311(5) <= mtii_cast5_fu_150_p1(5);
    mtii_cast5_reg_311(6) <= mtii_cast5_fu_150_p1(6);
    mtii_cast5_reg_311(7) <= mtii_cast5_fu_150_p1(7);
    mtii_cast5_reg_311(8) <= mtii_cast5_fu_150_p1(8);
    mtii_cast5_reg_311(9) <= mtii_cast5_fu_150_p1(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                read_reg_1_reg_345 <= read_reg_1_fu_222_p3;
                tmp_8_reg_350 <= read_reg_1_fu_222_p3(31 downto 30);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_10_reg_367 <= tmp_10_fu_259_p2;
                write_reg_reg_360 <= write_reg_fu_254_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = tmp_10_fu_259_p2))) then
                tmp_12_reg_371 <= tmp_12_fu_265_p2;
                tmp_64_reg_375 <= tmp_64_fu_271_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_154_p2 = ap_const_lv1_0))) then
                tmp_1_reg_319 <= tmp_1_fu_166_p2;
                tmp_3_reg_330 <= tmp_3_fu_177_p2;
            end if;
        end if;
    end process;
    fpga_uni_num_mt1_addr_reg_306(7 downto 0) <= "00000000";
    mtii_cast5_reg_311(31 downto 10) <= "0000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_154_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_154_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(fpga_uni_num_mt1_q0, ap_return_preg, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_return <= fpga_uni_num_mt1_q0;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_113 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_139 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_278 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_139)
    begin
        if (ap_sig_bdd_139) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_278)
    begin
        if (ap_sig_bdd_278) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_30)
    begin
        if (ap_sig_bdd_30) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_113)
    begin
        if (ap_sig_bdd_113) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_154_p2 <= "1" when (mtii_reg_137 = ap_const_lv10_270) else "0";
    fpga_uni_num_mt1_addr_gep_fu_58_p3 <= ap_const_lv64_0(8 - 1 downto 0);

    -- fpga_uni_num_mt1_address0 assign process. --
    fpga_uni_num_mt1_address0_assign_proc : process(fpga_uni_num_mt1_addr_reg_306, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_154_p2, tmp_2_fu_172_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((exitcond_fu_154_p2 = ap_const_lv1_0))) then 
                fpga_uni_num_mt1_address0 <= fpga_uni_num_mt1_addr_reg_306;
            elsif ((exitcond_fu_154_p2 = ap_const_lv1_0)) then 
                fpga_uni_num_mt1_address0 <= tmp_2_fu_172_p1(8 - 1 downto 0);
            else 
                fpga_uni_num_mt1_address0 <= "XXXXXXXX";
            end if;
        else 
            fpga_uni_num_mt1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- fpga_uni_num_mt1_address1 assign process. --
    fpga_uni_num_mt1_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_10, tmp_11_fu_295_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            fpga_uni_num_mt1_address1 <= tmp_11_fu_295_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            fpga_uni_num_mt1_address1 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            fpga_uni_num_mt1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- fpga_uni_num_mt1_ce0 assign process. --
    fpga_uni_num_mt1_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_154_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_154_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_154_p2 = ap_const_lv1_0))))) then 
            fpga_uni_num_mt1_ce0 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fpga_uni_num_mt1_ce1 assign process. --
    fpga_uni_num_mt1_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            fpga_uni_num_mt1_ce1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- fpga_uni_num_mt1_d1 assign process. --
    fpga_uni_num_mt1_d1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, s, write_reg_reg_360, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            fpga_uni_num_mt1_d1 <= write_reg_reg_360;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            fpga_uni_num_mt1_d1 <= s;
        else 
            fpga_uni_num_mt1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- fpga_uni_num_mt1_we1 assign process. --
    fpga_uni_num_mt1_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_10_reg_367, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = tmp_10_reg_367))))) then 
            fpga_uni_num_mt1_we1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fpga_uni_num_mt2_address0 <= tmp_5_fu_189_p1(8 - 1 downto 0);
    fpga_uni_num_mt2_address1 <= tmp_14_fu_290_p1(8 - 1 downto 0);

    -- fpga_uni_num_mt2_ce0 assign process. --
    fpga_uni_num_mt2_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            fpga_uni_num_mt2_ce0 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fpga_uni_num_mt2_ce1 assign process. --
    fpga_uni_num_mt2_ce1_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            fpga_uni_num_mt2_ce1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fpga_uni_num_mt2_d1 <= write_reg_reg_360;

    -- fpga_uni_num_mt2_we1 assign process. --
    fpga_uni_num_mt2_we1_assign_proc : process(tmp_10_reg_367, tmp_12_reg_371, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_10_reg_367) and not((ap_const_lv1_0 = tmp_12_reg_371))))) then 
            fpga_uni_num_mt2_we1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    fpga_uni_num_mt3_address0 <= tmp_7_fu_200_p1(8 - 1 downto 0);
    fpga_uni_num_mt3_address1 <= tmp_16_fu_280_p1(8 - 1 downto 0);

    -- fpga_uni_num_mt3_ce0 assign process. --
    fpga_uni_num_mt3_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            fpga_uni_num_mt3_ce0 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- fpga_uni_num_mt3_ce1 assign process. --
    fpga_uni_num_mt3_ce1_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            fpga_uni_num_mt3_ce1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fpga_uni_num_mt3_d1 <= write_reg_reg_360;

    -- fpga_uni_num_mt3_we1 assign process. --
    fpga_uni_num_mt3_we1_assign_proc : process(tmp_10_reg_367, tmp_12_reg_371, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_10_reg_367) and (ap_const_lv1_0 = tmp_12_reg_371)))) then 
            fpga_uni_num_mt3_we1 <= ap_const_logic_1;
        else 
            fpga_uni_num_mt3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_248_ce <= ap_const_logic_1;
    grp_fu_248_p0 <= (tmp_25_fu_240_p1 xor read_reg_1_reg_345);
    grp_fu_248_p1 <= ap_const_lv32_6C078965;
    mtii_1_fu_300_p2 <= std_logic_vector(unsigned(mtii_reg_137) + unsigned(ap_const_lv10_1));
    mtii_cast5_fu_150_p1 <= std_logic_vector(resize(unsigned(mtii_reg_137),32));
    read_reg_1_fu_222_p3 <= 
        fpga_uni_num_mt2_q0 when (sel_tmp2_fu_217_p2(0) = '1') else 
        read_reg_4_fu_205_p3;
    read_reg_4_fu_205_p3 <= 
        fpga_uni_num_mt1_q0 when (tmp_1_reg_319(0) = '1') else 
        fpga_uni_num_mt3_q0;
    sel_tmp1_fu_212_p2 <= (tmp_1_reg_319 xor ap_const_lv1_1);
    sel_tmp2_fu_217_p2 <= (tmp_3_reg_330 and sel_tmp1_fu_212_p2);
    tmp_10_fu_259_p2 <= "1" when (unsigned(mtii_reg_137) < unsigned(ap_const_lv10_E3)) else "0";
    tmp_11_fu_295_p1 <= std_logic_vector(resize(unsigned(mtii_reg_137),64));
    tmp_12_fu_265_p2 <= "1" when (unsigned(mtii_reg_137) < unsigned(ap_const_lv10_18D)) else "0";
    tmp_13_fu_285_p2 <= std_logic_vector(unsigned(tmp_64_reg_375) + unsigned(ap_const_lv8_1D));
    tmp_14_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_285_p2),64));
    tmp_15_fu_275_p2 <= std_logic_vector(unsigned(tmp_64_reg_375) + unsigned(ap_const_lv8_73));
    tmp_16_fu_280_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_275_p2),64));
    tmp_1_fu_166_p2 <= "1" when (unsigned(tmp_fu_160_p2) < unsigned(ap_const_lv10_E3)) else "0";
    tmp_25_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_8_reg_350),32));
    tmp_2_fu_172_p1 <= std_logic_vector(resize(unsigned(tmp_fu_160_p2),64));
    tmp_3_fu_177_p2 <= "1" when (unsigned(tmp_fu_160_p2) < unsigned(ap_const_lv10_18D)) else "0";
    tmp_4_fu_183_p2 <= std_logic_vector(unsigned(mtii_reg_137) + unsigned(ap_const_lv10_31C));
        tmp_5_fu_189_p1 <= std_logic_vector(resize(signed(tmp_4_fu_183_p2),64));

    tmp_64_fu_271_p1 <= mtii_reg_137(8 - 1 downto 0);
    tmp_6_fu_194_p2 <= std_logic_vector(unsigned(mtii_reg_137) + unsigned(ap_const_lv10_272));
        tmp_7_fu_200_p1 <= std_logic_vector(resize(signed(tmp_6_fu_194_p2),64));

    tmp_fu_160_p2 <= std_logic_vector(unsigned(mtii_reg_137) + unsigned(ap_const_lv10_3FF));
    write_reg_fu_254_p2 <= std_logic_vector(signed(grp_fu_248_p2) + signed(mtii_cast5_reg_311));
end behav;
